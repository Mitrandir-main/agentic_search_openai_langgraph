---
description:
globs:
alwaysApply: false
---
# VKS.bg Integration - Bulgarian Legal AI Assistant

## Overview
The VKS.bg integration provides specialized access to the Supreme Court of Bulgaria's database, enabling users to search for court decisions, rulings, and legal precedents directly from the highest judicial authority in Bulgaria.

## Integration Architecture

### 1. VKS Search Flow
```
User Query ‚Üí VKS Search Engine ‚Üí Document Retrieval ‚Üí AI Analysis ‚Üí Best Document Selection ‚Üí Full Content Analysis ‚Üí Formatted Response
```

### 2. Search Methods Hierarchy

#### **Primary Method: Google Custom Search Engine**
- High accuracy and relevance
- Real-time access to indexed VKS content
- Comprehensive coverage of VKS database
- Advanced ranking algorithms

#### **Fallback Method: DuckDuckGo Search**
- No API key requirements
- Privacy-focused search
- Alternative indexing perspective
- Reliable fallback option

#### **Simulation Method: Realistic Test Data**
- Development and testing
- API unavailability scenarios
- Demonstration purposes
- Quality assurance testing

## Document Classification System

### 1. Document Type Recognition
```python
DOCUMENT_TYPES = {
    "—Ä–µ—à–µ–Ω–∏–µ": "Court Decision - Final ruling on a case",
    "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ": "Court Order - Procedural or interim decision", 
    "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ": "Court Decree - Administrative or regulatory decision",
    "—Ä–∞–∑–ø–æ—Ä–µ–∂–¥–∞–Ω–µ": "Court Directive - Specific instruction or mandate"
}
```

### 2. Legal Area Classification
```python
LEGAL_AREAS = {
    "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ –ø—Ä–∞–≤–æ": ["–≥—Ä–∞–∂–¥", "–¥–æ–≥–æ–≤–æ—Ä", "—Å–æ–±—Å—Ç–≤–µ–Ω–æ—Å—Ç", "–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ"],
    "–Ω–∞–∫–∞–∑–∞—Ç–µ–ª–Ω–æ –ø—Ä–∞–≤–æ": ["–Ω–∞–∫–∞–∑", "–ø—Ä–µ—Å—Ç—ä–ø–ª–µ–Ω–∏–µ", "—Å–∞–Ω–∫—Ü–∏—è", "–∫—Ä–∏–≤–∏—á–Ω–æ"],
    "—Ç—ä—Ä–≥–æ–≤—Å–∫–æ –ø—Ä–∞–≤–æ": ["—Ç—ä—Ä–≥", "–¥—Ä—É–∂–µ—Å—Ç–≤–æ", "—Ç—ä—Ä–≥–æ–≤–µ—Ü", "–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è"],
    "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ –ø—Ä–∞–≤–æ": ["–∞–¥–º–∏–Ω", "–¥—ä—Ä–∂–∞–≤–∞", "–∞–∫—Ç", "–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"],
    "—Ç—Ä—É–¥–æ–≤–æ –ø—Ä–∞–≤–æ": ["—Ç—Ä—É–¥", "—Ä–∞–±–æ—Ç–∞", "–∑–∞–ø–ª–∞—Ç–∞", "–æ—Ç–ø—É—Å–∫"],
    "—Å–µ–º–µ–π–Ω–æ –ø—Ä–∞–≤–æ": ["—Å–µ–º–µ–π—Å—Ç–≤–æ", "–±—Ä–∞–∫", "—Ä–∞–∑–≤–æ–¥", "–¥–µ—Ç–µ"],
    "–¥–∞–Ω—ä—á–Ω–æ –ø—Ä–∞–≤–æ": ["–¥–∞–Ω—ä–∫", "—Ç–∞–∫—Å–∞", "–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è", "–ù–ê–ü"],
    "—Å–æ—Ü–∏–∞–ª–Ω–æ –ø—Ä–∞–≤–æ": ["—Å–æ—Ü–∏–∞–ª", "–ø–µ–Ω—Å–∏—è", "–æ–±–µ–∑—â–µ—Ç–µ–Ω–∏–µ", "–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç"]
}
```

## API Integration

### 1. Main Search Endpoint Integration
```python
elif methodology == "vks":
    vks_results = vks_bg_search(request.query, request.max_results)
    analysis = await analyze_vks_documents(request.query, vks_results)
    search_results = format_vks_results(request.query, vks_results, analysis)
```

### 2. Dedicated VKS Endpoint
```python
@app.post("/api/vks-search")
async def vks_search_endpoint(request: SearchRequest):
    """Dedicated endpoint for VKS-only searches"""
```

## Frontend Integration

### 1. Methodology Selection
```html
<option value="vks">‚öñÔ∏è –í–ö–° (–í—ä—Ä—Ö–æ–≤–µ–Ω –∫–∞—Å–∞—Ü–∏–æ–Ω–µ–Ω —Å—ä–¥)</option>
```

### 2. VKS-Specific UI Elements
```javascript
case 'vks_search':
    this.showSearchProgress('‚öñÔ∏è –¢—ä—Ä—Å—è –≤ –í–ö–° –±–∞–∑–∞ –¥–∞–Ω–Ω–∏...');
    break;
case 'vks_analysis':
    this.showSearchProgress('üß† AI –∞–Ω–∞–ª–∏–∑–∏—Ä–∞ —Ä–µ—à–µ–Ω–∏—è—Ç–∞ –Ω–∞ –í–ö–°...');
    break;
```

## Result Formatting

**Output Format:**
```
‚öñÔ∏è **–†–ï–ó–£–õ–¢–ê–¢–ò –û–¢ –í–™–†–•–û–í–ï–ù –ö–ê–°–ê–¶–ò–û–ù–ï–ù –°–™–î** –∑–∞: 'query'

üß† **AI –ê–ù–ê–õ–ò–ó:**
[Detailed AI analysis of the documents and their relevance]

üìã **–ù–ê–ô-–†–ï–õ–ï–í–ê–ù–¢–ù–ò –î–û–ö–£–ú–ï–ù–¢–ò:**
1. **–†–µ—à–µ–Ω–∏–µ ‚Ññ 1234/2024 –ø–æ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ –ø—Ä–∞–≤–æ**
   üìÑ [Document description]
   üîó [Document link]
   üìÇ –ü—Ä–∞–≤–Ω–∞ –æ–±–ª–∞—Å—Ç: –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ –ø—Ä–∞–≤–æ
   üìã –¢–∏–ø: —Ä–µ—à–µ–Ω–∏–µ
   üìù –î–µ–ª–æ ‚Ññ 1234/2024

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
‚Ä¢ –û–±—â–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏: 5
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏: 5
‚Ä¢ –ò–∑–±—Ä–∞–Ω–∏ –∑–∞ –ø–æ–¥—Ä–æ–±–µ–Ω –∞–Ω–∞–ª–∏–∑: 3
‚Ä¢ –ü—Ä–∞–≤–Ω–∏ –æ–±–ª–∞—Å—Ç–∏: –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ –ø—Ä–∞–≤–æ, —Ç—Ä—É–¥–æ–≤–æ –ø—Ä–∞–≤–æ

‚öñÔ∏è **–ò–∑—Ç–æ—á–Ω–∏–∫**: –í—ä—Ä—Ö–æ–≤–µ–Ω –∫–∞—Å–∞—Ü–∏–æ–Ω–µ–Ω —Å—ä–¥ –Ω–∞ –†–µ–ø—É–±–ª–∏–∫–∞ –ë—ä–ª–≥–∞—Ä–∏—è
```

## Testing & Quality Assurance

### Test Scenarios
```python
VKS_TEST_QUERIES = [
    "–æ–±–µ–∑—â–µ—Ç–µ–Ω–∏–µ –∑–∞ —Ç—Ä—É–¥–æ–≤–∞ –∑–ª–æ–ø–æ–ª—É–∫–∞",
    "–¥–æ–≥–æ–≤–æ—Ä –∑–∞ –∫—É–ø–æ–ø—Ä–æ–¥–∞–∂–±–∞ –Ω–µ–¥–≤–∏–∂–∏–º –∏–º–æ—Ç", 
    "–Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ —Ç–µ–ª–µ—Å–Ω–∞ –ø–æ–≤—Ä–µ–¥–∞",
    "—Ä–∞–∑–≤–æ–¥ –∏ –∞–ª–∏–º–µ–Ω—Ç–∏ –∑–∞ –¥–µ—Ü–∞",
    "–¥–∞–Ω—ä—á–Ω–æ –æ–±–ª–∞–≥–∞–Ω–µ –Ω–∞ –¥–æ—Ö–æ–¥–∏"
]
```

---

*This document provides comprehensive technical specifications for the VKS.bg integration within the Bulgarian Legal AI Assistant.*
