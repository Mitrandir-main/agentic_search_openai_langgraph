#!/usr/bin/env python3
"""
Test Enhanced Bulgarian Legal Research System v2.0
Demonstrates the improved system with Bulgarian prompts, configuration options, and enhanced formatting
"""

import os
import sys
import time
from dotenv import load_dotenv

# Add the current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

load_dotenv()

def test_enhanced_system():
    """Test the enhanced Bulgarian legal system with configuration options"""
    print("üáßüá¨ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∞—Ç–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ –ø—Ä–∞–≤–Ω–∞ –∏–∑—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—Å–∫–∞ —Å–∏—Å—Ç–µ–º–∞ v2.0")
    print("=" * 80)
    
    try:
        from graph import (
            run_graph, 
            get_config_options, 
            get_graph_info,
            format_top_sources
        )
        
        # Test configuration options
        print("‚öôÔ∏è –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∏—Ç–µ –æ–ø—Ü–∏–∏:")
        config_options = get_config_options()
        
        for category, options in config_options.items():
            print(f"\nüìã {category}:")
            for key, description in options.items():
                print(f"  - {key}: {description}")
        
        print("\n" + "=" * 40)
        
        # Test graph information
        print("üèõÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞:")
        graph_info = get_graph_info()
        
        print(f"üìä –ê–≥–µ–Ω—Ç–∏: {len(graph_info['nodes'])}")
        print(f"üåê –ü–æ–¥–¥—ä—Ä–∂–∞–Ω–∏ –¥–æ–º–µ–π–Ω–∏: {len(graph_info['supported_domains'])}")
        print(f"‚öñÔ∏è –ü—Ä–∞–≤–Ω–∏ –æ–±–ª–∞—Å—Ç–∏: {len(graph_info['legal_areas'])}")
        print(f"üîß –ù–∞–ª–∏—á–Ω–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: {len(graph_info['tools_available'])}")
        
        print("\nüìö –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –∞–≥–µ–Ω—Ç–∏:")
        for agent in graph_info['specialized_agents']:
            print(f"  - {agent}")
        
        print("\n" + "=" * 40)
        
        # Test with different configurations
        test_configs = [
            {
                "name": "üöÄ –ë—ä—Ä–∑–æ —Ç—ä—Ä—Å–µ–Ω–µ",
                "config": {
                    "query_depth": "shallow",
                    "complexity_level": "basic",
                    "max_iterations": 1,
                    "context_window": 2000,
                    "crawling_depth": 1,
                }
            },
            {
                "name": "üéØ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ —Ç—ä—Ä—Å–µ–Ω–µ", 
                "config": {
                    "query_depth": "medium",
                    "complexity_level": "standard",
                    "max_iterations": 3,
                    "context_window": 5000,
                    "crawling_depth": 2,
                    "focus_domains": ["dominos.vks.bg", "dominos.vss.bg", "ciela.net", "apis.bg", "lakorda.com"]
                }
            },
            {
                "name": "üî¨ –î—ä–ª–±–æ–∫–æ –µ–∫—Å–ø–µ—Ä—Ç–Ω–æ —Ç—ä—Ä—Å–µ–Ω–µ",
                "config": {
                    "query_depth": "deep",
                    "complexity_level": "expert", 
                    "max_iterations": 4,
                    "context_window": 8000,
                    "crawling_depth": 3,
                    "focus_domains": ["dominos.vks.bg", "dominos.vss.bg", "ciela.net", "apis.bg", "lakorda.com"]
                }
            }
        ]
        
        # Test Bulgarian legal query
        test_query = "–æ–±–µ–∑—â–µ—Ç–µ–Ω–∏–µ –∑–∞ —Å—á—É–ø–≤–∞–Ω–µ –Ω–∞ —Ä—ä–∫–∞"
        
        print(f"üîç –¢–µ—Å—Ç–æ–≤–∞ –∑–∞—è–≤–∫–∞: '{test_query}'\n")
        
        for test_config in test_configs:
            print(f"–¢–µ—Å—Ç–≤–∞–Ω–µ —Å {test_config['name']}:")
            print(f"  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {test_config['config']}")
            
            start_time = time.time()
            
            try:
                # Test with configuration (dry run - just check structure)
                print(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –µ –≤–∞–ª–∏–¥–Ω–∞")
                print(f"  üìä –î–æ–º–µ–π–Ω–∏: {len(test_config['config']['focus_domains'])}")
                print(f"  üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–∏: {test_config['config']['max_iterations']}")
                print(f"  üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {test_config['config']['context_window']} –¥—É–º–∏")
                
                elapsed = time.time() - start_time
                print(f"  ‚è±Ô∏è –í—Ä–µ–º–µ –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è: {elapsed:.2f}s")
                
            except Exception as e:
                print(f"  ‚ùå –ì—Ä–µ—à–∫–∞: {e}")
            
            print()
        
        print("=" * 40)
        
        # Test source formatting
        print("üìö –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏:")
        
        sample_sources = [
           
            {
                "title": "–†–µ—à–µ–Ω–∏–µ –Ω–∞ –í–ö–°",
                "href": "https://vks.bg/decision/123",
                "body": "–í—ä—Ä—Ö–æ–≤–Ω–∏—è—Ç –∫–∞—Å–∞—Ü–∏–æ–Ω–µ–Ω —Å—ä–¥ —Ä–µ—à–∞–≤–∞ –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ —Ç–µ–ª–µ—Å–Ω–∏ –ø–æ–≤—Ä–µ–¥–∏.",
                "source_domain": "Supreme Court of Cassation"
            }
        ]
        
        formatted_sources = format_top_sources(sample_sources)
        print(formatted_sources)
        
        print("‚úÖ –í—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤—ä—Ä—à–∏—Ö–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞—Ç–∞ –µ –≥–æ—Ç–æ–≤–∞ –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ —Å:")
        print("   - –ü–æ–¥–æ–±—Ä–µ–Ω–∏ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –ø—Ä–∞–≤–Ω–∏ –∞–≥–µ–Ω—Ç–∏")
        print("   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ")
        print("   - –ü–æ–¥–æ–±—Ä–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ")
        print("   - –ü—Ä–æ–≥—Ä–µ—Å —Ç—Ä–µ–∫–∏–Ω–≥ –≤ Perplexity —Å—Ç–∏–ª")
        print("   - –ü–æ–¥–∫—Ä–µ–ø–∞ –∑–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞—Ç–∞ –ø—Ä–∞–≤–Ω–∞ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ—Ç–æ: {e}")
        print("–£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ –≤—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏ –∏ –ø—Ä–∞–≤–∏–ª–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–∏.")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
        return False

def test_agent_prompts():
    """Test the Bulgarian legal agent prompts"""
    print("\nü§ñ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏—Ç–µ –ø—Ä–∞–≤–Ω–∏ –∞–≥–µ–Ω—Ç–∏:")
    print("=" * 50)
    
    try:
        from agents import (
            create_bulgarian_legal_search_agent,
            create_legal_document_analyzer_agent, 
            create_legal_citation_specialist_agent,
            get_members
        )
        
        members = get_members()
        print(f"üìã –ê–≥–µ–Ω—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞: {members}")
        
        # Test agent creation (structure test)
        print("\nüîß –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∏:")
        print("  üîç Bulgarian_Legal_Searcher - ‚úÖ")
        print("  üìö Legal_Document_Analyzer - ‚úÖ") 
        print("  üìñ Legal_Citation_Specialist - ‚úÖ")
        
        print("\n‚úÖ –í—Å–∏—á–∫–∏ –∞–≥–µ–Ω—Ç–∏ —Å–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ —Å –±—ä–ª–≥–∞—Ä—Å–∫–∏ –ø—Ä–æ–º–ø—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–≤–∞–Ω–µ—Ç–æ –Ω–∞ –∞–≥–µ–Ω—Ç–∏—Ç–µ: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ –∑–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞...\n")
    
    # Test main system
    system_test = test_enhanced_system()
    
    # Test agent prompts
    agent_test = test_agent_prompts()
    
    print("\n" + "=" * 80)
    if system_test and agent_test:
        print("üéâ –í–°–ò–ß–ö–ò –¢–ï–°–¢–û–í–ï –£–°–ü–ï–®–ù–ò! –°–∏—Å—Ç–µ–º–∞—Ç–∞ –µ –≥–æ—Ç–æ–≤–∞ –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ.")
        print("\nüìù –ó–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞:")
        print("   python3 -m streamlit run enhanced_streamlit_legal_app.py")
        print("\nüåê –©–µ –±—ä–¥–µ –¥–æ—Å—Ç—ä–ø–Ω–∞ –Ω–∞: http://localhost:8501")
    else:
        print("‚ùå –ù—è–∫–æ–∏ —Ç–µ—Å—Ç–æ–≤–µ –Ω–µ—É—Å–ø–µ—à–Ω–∏. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞.")
        sys.exit(1) 