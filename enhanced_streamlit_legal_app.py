import streamlit as st
from dotenv import load_dotenv
from enhanced_legal_graph import (
    run_legal_research,
    run_legal_research_with_streaming,
    visualize_legal_graph,
    get_legal_graph_info
)
# Domain configurations moved inline to avoid dependencies
import os
import json
from datetime import datetime
import pandas as pd

load_dotenv()

def main():
    st.set_page_config(
        page_title="üèõÔ∏è Enhanced Bulgarian Legal Research System",
        page_icon="üèõÔ∏è",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Custom CSS for legal styling
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #1f4e79, #2e6da4);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .legal-domain {
        background: #f8f9fa;
        padding: 1rem;
        border-left: 4px solid #1f4e79;
        margin: 0.5rem 0;
        border-radius: 5px;
    }
    .agent-status {
        background: #e8f4f8;
        padding: 0.5rem;
        border-radius: 5px;
        margin: 0.25rem 0;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Main header
    st.markdown("""
    <div class="main-header">
        <h1>üèõÔ∏è Enhanced Bulgarian Legal Research System</h1>
        <p>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞ –∏–∑—Å–ª–µ–¥–≤–∞–Ω–µ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–æ—Ç–æ –ø—Ä–∞–≤–æ —Å –º—É–ª—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar configuration
    with st.sidebar:
        st.title("üõ†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ –∏–∑—Å–ª–µ–¥–≤–∞–Ω–µ—Ç–æ")
        
        # API Status
        st.subheader("üîë API –°—Ç–∞—Ç—É—Å")
        openai_key = os.getenv('OPENAI_API_KEY')
        st.write("‚úÖ OpenAI:" if openai_key else "‚ùå OpenAI:", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω" if openai_key else "–õ–∏–ø—Å–≤–∞")
        
        # Legal Domain Selection
        st.subheader("üåê –ò–∑–±–æ—Ä –Ω–∞ –ø—Ä–∞–≤–Ω–∏ –¥–æ–º–µ–π–Ω–∏")
        st.write("–ò–∑–±–µ—Ä–µ—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∏ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –ø—Ä–∞–≤–Ω–∏ –¥–æ–º–µ–π–Ω–∏ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ:")
        
        selected_domains = {}
        
        # Simple domain selection with fallback
        domain_options = {
            'lex_bg': 'LexBG - Bulgarian Legal Database',
            'vks_bg': 'Supreme Court of Cassation (–í–ö–°)',
            'vss_bg': 'Supreme Administrative Court (–í–ê–°)', 
            'justice_bg': 'Ministry of Justice',
            'parliament_bg': 'National Assembly',
            'cpc_bg': 'Data Protection Commission (–ö–ó–õ–î)',
            'dv_bg': 'State Gazette'
        }
        
        for domain_key, domain_name in domain_options.items():
            selected = st.checkbox(
                f"**{domain_name}**", 
                value=True,
                key=f"domain_{domain_key}",
                help=f"Search in {domain_key.replace('_', '.')} domain"
            )
            selected_domains[domain_key] = selected
        
        # Legal Area Focus
        st.subheader("‚öñÔ∏è –ü—Ä–∞–≤–Ω–∞ –æ–±–ª–∞—Å—Ç")
        
        # Simple legal area options
        legal_area_options = {
            "auto": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–Ω–µ",
            "civil_law": "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ –ø—Ä–∞–≤–æ",
            "criminal_law": "–ù–∞–∫–∞–∑–∞—Ç–µ–ª–Ω–æ –ø—Ä–∞–≤–æ", 
            "administrative_law": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ –ø—Ä–∞–≤–æ",
            "constitutional_law": "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ –ø—Ä–∞–≤–æ",
            "commercial_law": "–¢—ä—Ä–≥–æ–≤—Å–∫–æ –ø—Ä–∞–≤–æ",
            "labor_law": "–¢—Ä—É–¥–æ–≤–æ –ø—Ä–∞–≤–æ",
            "tax_law": "–î–∞–Ω—ä—á–Ω–æ –ø—Ä–∞–≤–æ",
            "data_protection": "–ó–∞—â–∏—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ"
        }
        
        legal_area = st.selectbox(
            "–ò–∑–±–µ—Ä–µ—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ –ø—Ä–∞–≤–Ω–∞ –æ–±–ª–∞—Å—Ç:",
            list(legal_area_options.keys()),
            format_func=lambda x: legal_area_options[x]
        )
        
        # Search Options
        st.subheader("üéØ –û–ø—Ü–∏–∏ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ")
        workflow_type = st.selectbox(
            "–¢–∏–ø –Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏—è –ø–æ—Ç–æ–∫:",
            ["auto", "research_heavy", "precedent_focused", "document_analysis", "comprehensive"],
            help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ –æ–ø—Ç–∏–º–∞–ª–Ω–∏—è workflow –≤—ä–∑ –æ—Å–Ω–æ–≤–∞ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞"
        )
        
        show_streaming = st.checkbox("üì° –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ streaming —Ä–µ–∑—É–ª—Ç–∞—Ç–∏", value=True)
        show_agent_details = st.checkbox("ü§ñ –î–µ—Ç–∞–π–ª–∏ –∑–∞ –∞–≥–µ–Ω—Ç–∏—Ç–µ", value=False)
        show_citations = st.checkbox("üìö –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Ü–∏—Ç–∞—Ç–∏", value=True)
        
        # Advanced Options
        st.subheader("‚öôÔ∏è –†–∞–∑—à–∏—Ä–µ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        max_iterations = st.slider("–ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–∏", 3, 10, 6)
        confidence_threshold = st.slider("–ü—Ä–∞–≥ –Ω–∞ –¥–æ–≤–µ—Ä–∏–µ", 0.1, 1.0, 0.7)
        
        # Graph Visualization
        if st.button("üé® –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è..."):
                try:
                    mermaid_syntax = visualize_legal_graph()
                    st.success("‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∞!")
                    with st.expander("üìä Mermaid –∫–æ–¥"):
                        st.code(mermaid_syntax, language="text")
                except Exception as e:
                    st.error(f"‚ùå –ì—Ä–µ—à–∫–∞: {e}")
    
    # Initialize session state for user input
    if 'user_input' not in st.session_state:
        st.session_state.user_input = ""
    
    # Main content area
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.subheader("üìù –ü—Ä–∞–≤–Ω–∞ –∑–∞—è–≤–∫–∞")
        user_input = st.text_area(
            "–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∞—Ç–∞ –ø—Ä–∞–≤–Ω–∞ –∑–∞—è–≤–∫–∞ –∏–ª–∏ –≤—ä–ø—Ä–æ—Å:",
            value=st.session_state.user_input,
            height=120,
            placeholder="–ü—Ä–∏–º–µ—Ä: –ö–∞–∫–≤–∏ —Å–∞ –∏–∑–∏—Å–∫–≤–∞–Ω–∏—è—Ç–∞ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—ä—Ä–≥–æ–≤—Å–∫–æ –¥—Ä—É–∂–µ—Å—Ç–≤–æ —Å–ø–æ—Ä–µ–¥ –±—ä–ª–≥–∞—Ä—Å–∫–æ—Ç–æ –ø—Ä–∞–≤–æ? –ö–∞–∫–≤–∏ —Å–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¢—ä—Ä–≥–æ–≤—Å–∫–∏—è –∑–∞–∫–æ–Ω?",
            help="–ë—ä–¥–µ—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∏ –∑–∞ –ø–æ-–¥–æ–±—Ä–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏. –°–∏—Å—Ç–µ–º–∞—Ç–∞ —â–µ —Ç—ä—Ä—Å–∏ —Å–∞–º–æ –≤ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –ø—Ä–∞–≤–Ω–∏ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏.",
            key="main_input"
        )
        
        # Update session state when user types
        st.session_state.user_input = user_input
        
        # Quick examples with better layout
        st.write("**–ü—Ä–∏–º–µ—Ä–Ω–∏ –∑–∞—è–≤–∫–∏ (–∫–ª–∏–∫–Ω–µ—Ç–µ –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ):**")
        example_queries = [
            "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –û–û–î –≤ –ë—ä–ª–≥–∞—Ä–∏—è",
            "–ö–∞–∫–≤–æ –µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∏ –æ–±–µ—â–µ—Ç–µ–Ω–∏–µ –ø—Ä–∏ —Å—á—É–ø–≤–∞–Ω–µ –Ω–∞ —Ä—ä–∫–∞", 
            "–°—ä–¥–µ–±–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω—ä—á–Ω–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è 2024",
            "–ò–∑–∏—Å–∫–≤–∞–Ω–∏—è –∑–∞ GDPR —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –ë—ä–ª–≥–∞—Ä–∏—è",
            "–¢—Ä—É–¥–æ–≤–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—Å—Ç–≤–æ - –ø—Ä–µ–∫—Ä–∞—Ç—è–≤–∞–Ω–µ –Ω–∞ –¥–æ–≥–æ–≤–æ—Ä",
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ –æ–±–∂–∞–ª–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω—ä—á–Ω–∏ –∞–∫—Ç–æ–≤–µ"
        ]
        
        # Create example buttons in a 2-column grid
        cols = st.columns(2)
        for i, example in enumerate(example_queries):
            col_idx = i % 2
            with cols[col_idx]:
                if st.button(f"üìã {example}", key=f"example_{i}", use_container_width=True):
                    st.session_state.user_input = example
                    st.rerun()
    
    with col2:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞")
        
        # Display selected domains
        active_domains = [k for k, v in selected_domains.items() if v]
        st.metric("–ê–∫—Ç–∏–≤–Ω–∏ –¥–æ–º–µ–π–Ω–∏", len(active_domains), len(domain_options))
        
        # Simple system info
        st.metric("–ê–≥–µ–Ω—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞", 6)  # Known agent count
        st.metric("–ü—Ä–∞–≤–Ω–∏ –æ–±–ª–∞—Å—Ç–∏", len(legal_area_options) - 1)  # Exclude 'auto'
        
        # Show active domains
        if active_domains:
            st.write("**–ê–∫—Ç–∏–≤–Ω–∏ –¥–æ–º–µ–π–Ω–∏:**")
            for domain in active_domains:
                domain_name = domain_options.get(domain, domain)
                domain_url = domain.replace('_', '.')
                st.markdown(f"""
                <div class="legal-domain">
                    <strong>{domain_name}</strong><br>
                    <small>{domain_url}</small>
                </div>
                """, unsafe_allow_html=True)
    
    # Search execution
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        search_button = st.button("üîç –ó–∞–ø–æ—á–≤–∞–Ω–µ –Ω–∞ –ø—Ä–∞–≤–Ω–æ –∏–∑—Å–ª–µ–¥–≤–∞–Ω–µ", type="primary", use_container_width=True)
    
    with col2:
        clear_button = st.button("üóëÔ∏è –ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ", use_container_width=True)
    
    with col3:
        if st.button("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≥—Ä–∞—Ñ–∞", use_container_width=True):
            simple_info = {
                "agents": 6,
                "domains": len(domain_options),
                "legal_areas": len(legal_area_options) - 1,
                "active_domains": active_domains
            }
            st.json(simple_info)
    
    if clear_button:
        st.session_state.user_input = ""
        st.rerun()
    
    # Process legal research
    if search_button and user_input:
        if not openai_key:
            st.error("‚ùå OpenAI API –∫–ª—é—á –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º. –ú–æ–ª—è, –¥–æ–±–∞–≤–µ—Ç–µ –≥–æ –≤—ä–≤ –≤–∞—à–∏—è .env —Ñ–∞–π–ª.")
            return
        
        # Filter query based on selected domains
        domain_context = ""
        if active_domains:
            domain_names = [domain_options.get(d, d) for d in active_domains]
            domain_context = f" (–§–æ–∫—É—Å –≤—ä—Ä—Ö—É: {', '.join(domain_names)})"
        
        enhanced_query = user_input + domain_context
        
        # Results section
        st.markdown("---")
        st.subheader("üìã –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –ø—Ä–∞–≤–Ω–æ—Ç–æ –∏–∑—Å–ª–µ–¥–≤–∞–Ω–µ")
        
        if show_streaming:
            # Streaming results
            st.markdown("### üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ")
            
            with st.container():
                result_placeholder = st.empty()
                
                with st.spinner("üèõÔ∏è –ê–≥–µ–Ω—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç—è—Ç –≤—ä—Ä—Ö—É –≤–∞—à–∞—Ç–∞ –∑–∞—è–≤–∫–∞..."):
                    try:
                        if show_agent_details:
                            # Show detailed streaming
                            result = run_legal_research_with_streaming(enhanced_query)
                        else:
                            # Regular processing with progress
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            
                            status_text.text("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∏—Ç–µ...")
                            progress_bar.progress(20)
                            
                            status_text.text("üìö –¢—ä—Ä—Å–µ–Ω–µ –≤ –ø—Ä–∞–≤–Ω–∏ –±–∞–∑–∏ –¥–∞–Ω–Ω–∏...")
                            progress_bar.progress(40)
                            
                            status_text.text("üß† –ê–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–∞–≤–Ω–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...")
                            progress_bar.progress(60)
                            
                            status_text.text("‚öñÔ∏è –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ —Å—ä–¥–µ–±–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞...")
                            progress_bar.progress(80)
                            
                            result = run_legal_research(enhanced_query, workflow_type)
                            
                            status_text.text("‚úÖ –ó–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞...")
                            progress_bar.progress(100)
                            
                            # Clear progress indicators
                            progress_bar.empty()
                            status_text.empty()
                            
                    except Exception as e:
                        st.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞: {e}")
                        return
        else:
            # Standard processing
            with st.spinner("üîç –ò–∑–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ –ø—Ä–∞–≤–Ω–æ –∏–∑—Å–ª–µ–¥–≤–∞–Ω–µ..."):
                try:
                    result = run_legal_research(enhanced_query, workflow_type)
                except Exception as e:
                    st.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞: {e}")
                    return
        
        # Display results
        if result:
            st.markdown("### üéØ –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –∞–Ω–∞–ª–∏–∑–∞")
            
            # Parse and display structured results
            if "**–ü–†–ê–í–ù–û –ò–ó–°–õ–ï–î–í–ê–ù–ï - –†–ï–ó–£–õ–¢–ê–¢–ò**" in result:
                # Enhanced results format
                sections = result.split("##")
                
                for section in sections:
                    if section.strip():
                        section_lines = section.strip().split("\n")
                        section_title = section_lines[0].strip()
                        section_content = "\n".join(section_lines[1:]).strip()
                        
                        if section_title and section_content:
                            if "–ú–µ—Ç–∞–¥–∞–Ω–Ω–∏" in section_title:
                                with st.expander("üìÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω–∏ –Ω–∞ –∏–∑—Å–ª–µ–¥–≤–∞–Ω–µ—Ç–æ", expanded=False):
                                    st.markdown(section_content)
                            elif "—Ü–∏—Ç–∞—Ç–∏" in section_title.lower():
                                with st.expander("üìö –ü—Ä–∞–≤–Ω–∏ —Ü–∏—Ç–∞—Ç–∏", expanded=show_citations):
                                    st.markdown(section_content)
                            elif "–ò–∑—Ç–æ—á–Ω–∏—Ü–∏" in section_title:
                                with st.expander("üåê –ò–∑–ø–æ–ª–∑–≤–∞–Ω–∏ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏", expanded=False):
                                    st.markdown(section_content)
                            elif "–û–°–ù–û–í–ï–ù –ê–ù–ê–õ–ò–ó" in section_title:
                                st.markdown("### üéØ –û—Å–Ω–æ–≤–µ–Ω –∞–Ω–∞–ª–∏–∑")
                                st.markdown(section_content)
                            elif "–∞–≥–µ–Ω—Ç–∏" in section_title.lower():
                                if show_agent_details:
                                    with st.expander("ü§ñ –î–µ—Ç–∞–π–ª–∏ –∑–∞ –∞–≥–µ–Ω—Ç–∏—Ç–µ", expanded=False):
                                        st.markdown(section_content)
                            elif "–ö–∞—á–µ—Å—Ç–≤–æ" in section_title:
                                with st.expander("üìä –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –∏–∑—Å–ª–µ–¥–≤–∞–Ω–µ—Ç–æ", expanded=False):
                                    st.markdown(section_content)
            else:
                # Simple result format
                st.markdown(result)
                
        else:
            st.warning("‚ö†Ô∏è –ù—è–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ —Å —Ä–∞–∑–ª–∏—á–Ω–∞ –∑–∞—è–≤–∫–∞.")
    
    elif search_button and not user_input:
        st.warning("‚ö†Ô∏è –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –ø—Ä–∞–≤–Ω–∞ –∑–∞—è–≤–∫–∞.")
    
    # Footer with system information
    st.markdown("---")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        **üèõÔ∏è –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
        - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ –∑–∞ –±—ä–ª–≥–∞—Ä—Å–∫–æ—Ç–æ –ø—Ä–∞–≤–æ
        - –ú—É–ª—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
        - Conciliator pattern –∑–∞ —Ä–∞–∑—Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∏
        """)
    
    with col2:
        st.markdown("""
        **üåê –ü–æ–∫—Ä–∏—Ç–∏ –¥–æ–º–µ–π–Ω–∏:**
        - lex.bg, vks.bg, vss.bg
        - justice.bg, parliament.bg
        - cpc.bg, dv.bg
        """)
    
    with col3:
        st.markdown("""
        **ü§ñ –ê–≥–µ–Ω—Ç–∏:**
        - Legal Researcher
        - Legal Analyst  
        - Precedent Finder
        - Document Reviewer
        - Legal Conciliator
        """)
    
    st.markdown("""
    <div style='text-align: center; color: #666; margin-top: 2rem;'>
        Powered by Enhanced LangGraph, OpenAI, and specialized Bulgarian legal tools<br>
        üáßüá¨ –§–æ–∫—É—Å–∏—Ä–∞–Ω–∞ –≤—ä—Ä—Ö—É –±—ä–ª–≥–∞—Ä—Å–∫–æ—Ç–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—Å—Ç–≤–æ –∏ —Å—ä–¥–µ–±–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main() 