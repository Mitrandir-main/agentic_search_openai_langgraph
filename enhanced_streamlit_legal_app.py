import streamlit as st
import time
import json
from dotenv import load_dotenv
from graph import (
    run_graph, 
    run_graph_with_streaming, 
    visualize_graph, 
    get_graph_info,
    get_config_options,
    format_top_sources
)
import os
import threading
from concurrent.futures import ThreadPoolExecutor

load_dotenv()

def main():
    st.set_page_config(
        page_title="üáßüá¨ –ë—ä–ª–≥–∞—Ä—Å–∫–∞ –ü—Ä–∞–≤–Ω–∞ –ò–∑—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—Å–∫–∞ –°–∏—Å—Ç–µ–º–∞",
        page_icon="‚öñÔ∏è",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # Custom CSS for better styling
    st.markdown("""
    <style>
    .main-header {
        padding: 1rem 0;
        background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%);
        color: white;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 2rem;
    }
    .config-section {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }
    .source-card {
        background: #ffffff;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .progress-text {
        font-weight: 600;
        color: #495057;
    }
    .legal-response {
        background: #f8f9fa;
        border-left: 4px solid #007bff;
        padding: 1rem;
        border-radius: 0 8px 8px 0;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Main header
    st.markdown("""
    <div class="main-header">
        <h1>üáßüá¨ –ë—ä–ª–≥–∞—Ä—Å–∫–∞ –ü—Ä–∞–≤–Ω–∞ –ò–∑—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—Å–∫–∞ –°–∏—Å—Ç–µ–º–∞</h1>
        <p>–ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–Ω–æ —Ç—ä—Ä—Å–µ–Ω–µ –∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–æ—Ç–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—Å—Ç–≤–æ</p>
    </div>
    """, unsafe_allow_html=True)

    # Initialize session state for configuration and query tracking
    if 'user_input' not in st.session_state:
        st.session_state.user_input = ""
    if 'search_config' not in st.session_state:
        st.session_state.search_config = {
            "query_depth": "medium",
            "complexity_level": "standard",
            "max_iterations": 3,
            "context_window": 5000,
            "crawling_depth": 2
        }
    if 'search_history' not in st.session_state:
        st.session_state.search_history = []

    # Sidebar with configuration and status
    with st.sidebar:
        st.title("üõ†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        
        # API status check
        openai_key = os.getenv('OPENAI_API_KEY')
        google_cse_key = os.getenv('GOOGLE_CSE_API_KEY')
        
        st.subheader("üîë –°—Ç–∞—Ç—É—Å –Ω–∞ API")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("OpenAI", "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if openai_key else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ")
        with col2:
            st.metric("Google CSE", "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if google_cse_key else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ")
        
        st.divider()
        
        # Configuration options
        st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞ —Ç—ä—Ä—Å–µ–Ω–µ—Ç–æ")
        config_options = get_config_options()
        
        # Query depth configuration
        st.session_state.search_config["query_depth"] = st.selectbox(
            "üîç –î—ä–ª–±–æ—á–∏–Ω–∞ –Ω–∞ —Ç—ä—Ä—Å–µ–Ω–µ—Ç–æ:",
            options=list(config_options["query_depth"].keys()),
            format_func=lambda x: config_options["query_depth"][x],
            index=list(config_options["query_depth"].keys()).index(st.session_state.search_config["query_depth"])
        )
        
        # Complexity level
        st.session_state.search_config["complexity_level"] = st.selectbox(
            "üéØ –ù–∏–≤–æ –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç:",
            options=list(config_options["complexity_level"].keys()),
            format_func=lambda x: config_options["complexity_level"][x],
            index=list(config_options["complexity_level"].keys()).index(st.session_state.search_config["complexity_level"])
        )
        
        # Max iterations
        st.session_state.search_config["max_iterations"] = st.selectbox(
            "üîÑ –ú–∞–∫—Å–∏–º–∞–ª–Ω–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏:",
            options=list(config_options["max_iterations"].keys()),
            format_func=lambda x: config_options["max_iterations"][x],
            index=list(config_options["max_iterations"].keys()).index(st.session_state.search_config["max_iterations"])
        )
        
        # Context window
        st.session_state.search_config["context_window"] = st.selectbox(
            "üìÑ –†–∞–∑–º–µ—Ä –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:",
            options=list(config_options["context_window"].keys()),
            format_func=lambda x: config_options["context_window"][x],
            index=list(config_options["context_window"].keys()).index(st.session_state.search_config["context_window"])
        )
        
        # Crawling depth
        st.session_state.search_config["crawling_depth"] = st.selectbox(
            "üï∑Ô∏è –î—ä–ª–±–æ—á–∏–Ω–∞ –Ω–∞ –æ–±—Ö–æ–∂–¥–∞–Ω–µ:",
            options=list(config_options["crawling_depth"].keys()),
            format_func=lambda x: config_options["crawling_depth"][x],
            index=list(config_options["crawling_depth"].keys()).index(st.session_state.search_config["crawling_depth"])
        )
        
        st.divider()
        
                # Domain focus options
        st.subheader("üèõÔ∏è –§–æ–∫—É—Å –≤—ä—Ä—Ö—É –¥–æ–º–µ–π–Ω–∏")
        domain_options = {
            'lex_bg': 'LexBG - –ü—Ä–∞–≤–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω–∏',
            'vks_bg': '–í–ö–° - –í—ä—Ä—Ö–æ–≤–µ–Ω –∫–∞—Å–∞—Ü–∏–æ–Ω–µ–Ω —Å—ä–¥',
            'vss_bg': '–í–ê–° - –í—ä—Ä—Ö–æ–≤–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–µ–Ω —Å—ä–¥',
            'justice_bg': '–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –Ω–∞ –ø—Ä–∞–≤–æ—Å—ä–¥–∏–µ—Ç–æ'
        }
        
        selected_domains = []
        for domain_key, domain_name in domain_options.items():
            if st.checkbox(domain_name, value=True, key=f"domain_{domain_key}"):
                selected_domains.append(domain_key)
        
        st.session_state.search_config["focus_domains"] = selected_domains
        
        st.divider()
        
        # System information
        if st.button("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞"):
            info = get_graph_info()
            st.json(info)

    # Main content area
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.subheader("üìù –ü—Ä–∞–≤–Ω–∞ –∑–∞—è–≤–∫–∞")
        user_input = st.text_area(
            "–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∞—Ç–∞ –ø—Ä–∞–≤–Ω–∞ –∑–∞—è–≤–∫–∞ –∏–ª–∏ –≤—ä–ø—Ä–æ—Å:",
            value=st.session_state.user_input,
            height=120,
            placeholder="–ü—Ä–∏–º–µ—Ä: –ö–∞–∫–≤–∏ —Å–∞ –∏–∑–∏—Å–∫–≤–∞–Ω–∏—è—Ç–∞ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—ä—Ä–≥–æ–≤—Å–∫–æ –¥—Ä—É–∂–µ—Å—Ç–≤–æ —Å–ø–æ—Ä–µ–¥ –±—ä–ª–≥–∞—Ä—Å–∫–æ—Ç–æ –ø—Ä–∞–≤–æ?",
            help="–ë—ä–¥–µ—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∏ –∑–∞ –ø–æ-–¥–æ–±—Ä–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏. –°–∏—Å—Ç–µ–º–∞—Ç–∞ —â–µ —Ç—ä—Ä—Å–∏ –≤ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –ø—Ä–∞–≤–Ω–∏ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏.",
            key="query_input"
        )
        
        # Update session state when input changes
        if user_input != st.session_state.user_input:
            st.session_state.user_input = user_input
        
        # Quick example queries
        st.write("**üí° –ü—Ä–∏–º–µ—Ä–Ω–∏ –∑–∞—è–≤–∫–∏:**")
        col_ex1, col_ex2 = st.columns(2)
        
        with col_ex1:
            if st.button("üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –û–û–î –≤ –ë—ä–ª–≥–∞—Ä–∏—è", use_container_width=True):
                st.session_state.user_input = "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –û–û–î –≤ –ë—ä–ª–≥–∞—Ä–∏—è"
                st.rerun()
            if st.button("‚öñÔ∏è –°—ä–¥–µ–±–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω—ä—á–Ω–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è", use_container_width=True):
                st.session_state.user_input = "–°—ä–¥–µ–±–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω—ä—á–Ω–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è 2024"
                st.rerun()
        
        with col_ex2:
            if st.button("ü§ï –û–±–µ–∑—â–µ—Ç–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ–ª–µ—Å–Ω–∞ –ø–æ–≤—Ä–µ–¥–∞", use_container_width=True):
                st.session_state.user_input = "–ö–∞–∫–≤–æ –µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∏ –æ–±–µ–∑—â–µ—Ç–µ–Ω–∏–µ –ø—Ä–∏ —Å—á—É–ø–≤–∞–Ω–µ –Ω–∞ —Ä—ä–∫–∞"
                st.rerun()
            if st.button("üõ°Ô∏è GDPR —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –ë—ä–ª–≥–∞—Ä–∏—è", use_container_width=True):
                st.session_state.user_input = "–ò–∑–∏—Å–∫–≤–∞–Ω–∏—è –∑–∞ GDPR —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –ë—ä–ª–≥–∞—Ä–∏—è"
                st.rerun()

    with col2:
        st.write("")  # Spacing
        search_button = st.button("üîç –ó–∞–ø–æ—á–Ω–∏ –∏–∑—Å–ª–µ–¥–≤–∞–Ω–µ", type="primary", use_container_width=True)
        clear_button = st.button("üóëÔ∏è –ò–∑—á–∏—Å—Ç–∏", use_container_width=True)
        
        if clear_button:
            st.session_state.user_input = ""
            st.rerun()

    # Process search with enhanced progress tracking
    if search_button and st.session_state.user_input:
        if not openai_key:
            st.error("‚ùå OpenAI API –∫–ª—é—á –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º. –ú–æ–ª—è, –¥–æ–±–∞–≤–µ—Ç–µ –≥–æ –≤ .env —Ñ–∞–π–ª–∞.")
            return
        
        # Add query to history
        query_time = time.strftime("%H:%M:%S")
        st.session_state.search_history.append({
            "query": st.session_state.user_input,
            "time": query_time,
            "config": st.session_state.search_config.copy()
        })
        
        st.markdown("---")
        st.subheader("üìã –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –ø—Ä–∞–≤–Ω–æ—Ç–æ –∏–∑—Å–ª–µ–¥–≤–∞–Ω–µ")
        
        # Enhanced progress tracking
        progress_container = st.container()
        with progress_container:
            progress_bar = st.progress(0)
            status_text = st.empty()
            agent_details = st.empty()
        
        # Results container
        results_container = st.container()
        
        # Define progress callback
        def update_progress(message, progress):
            progress_bar.progress(progress)
            status_text.markdown(f"<div class='progress-text'>{message}</div>", unsafe_allow_html=True)
        
        # Execute search with streaming
        with st.spinner("ü§ñ –°—Ç–∞—Ä—Ç–∏—Ä–∞–º –±—ä–ª–≥–∞—Ä—Å–∫–∞—Ç–∞ –ø—Ä–∞–≤–Ω–∞ –∏–∑—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—Å–∫–∞ —Å–∏—Å—Ç–µ–º–∞..."):
            try:
                # Run the enhanced legal research
                result = run_graph_with_streaming(
                    st.session_state.user_input, 
                    progress_callback=update_progress,
                    config=st.session_state.search_config
                )
                
                # Complete progress
                progress_bar.progress(1.0)
                status_text.markdown("<div class='progress-text'>‚úÖ –ü—Ä–∞–≤–Ω–æ—Ç–æ –∏–∑—Å–ª–µ–¥–≤–∞–Ω–µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</div>", unsafe_allow_html=True)
                
                # Display results with enhanced formatting
                with results_container:
                    if result:
                        # Parse and format the result for better display
                        st.markdown(f"""
                        <div class="legal-response">
                        <h3>üìã –ü–†–ê–í–ï–ù –ê–ù–ê–õ–ò–ó: {st.session_state.user_input[:100]}{"..." if len(st.session_state.user_input) > 100 else ""}</h3>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Display the formatted result
                        st.markdown(result)
                        
                        # Add download option for the result
                        col_download1, col_download2 = st.columns(2)
                        with col_download1:
                            st.download_button(
                                label="üìÑ –ò–∑—Ç–µ–≥–ª–∏ –∫–∞—Ç–æ —Ç–µ–∫—Å—Ç",
                                data=result,
                                file_name=f"pravno_izsledvane_{query_time.replace(':', '-')}.txt",
                                mime="text/plain"
                            )
                        
                        with col_download2:
                            # Format as JSON for structured download
                            structured_result = {
                                "query": st.session_state.user_input,
                                "timestamp": query_time,
                                "config": st.session_state.search_config,
                                "result": result
                            }
                            st.download_button(
                                label="üìä –ò–∑—Ç–µ–≥–ª–∏ –∫–∞—Ç–æ JSON",
                                data=json.dumps(structured_result, ensure_ascii=False, indent=2),
                                file_name=f"pravno_izsledvane_{query_time.replace(':', '-')}.json",
                                mime="application/json"
                            )
                    else:
                        st.warning("‚ö†Ô∏è –ù–µ –±—è—Ö–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ —Å —Ä–∞–∑–ª–∏—á–Ω–∞ –∑–∞—è–≤–∫–∞.")
                        
            except Exception as e:
                st.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø–æ –≤—Ä–µ–º–µ –Ω–∞ –∏–∑—Å–ª–µ–¥–≤–∞–Ω–µ—Ç–æ: {e}")
                status_text.markdown("<div class='progress-text'>‚ùå –ì—Ä–µ—à–∫–∞ –ø–æ –≤—Ä–µ–º–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞</div>", unsafe_allow_html=True)

    elif search_button and not st.session_state.user_input:
        st.warning("‚ö†Ô∏è –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –ø—Ä–∞–≤–Ω–∞ –∑–∞—è–≤–∫–∞.")

    # Search history section
    if st.session_state.search_history:
        st.markdown("---")
        st.subheader("üìö –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ —Ç—ä—Ä—Å–µ–Ω–∏—è—Ç–∞")
        
        with st.expander(f"–ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ {len(st.session_state.search_history)} –ø—Ä–µ–¥–∏—à–Ω–∏ –∑–∞—è–≤–∫–∏", expanded=False):
            for i, entry in enumerate(reversed(st.session_state.search_history[-10:]), 1):  # Show last 10
                st.markdown(f"""
                **{i}. {entry['time']}** - *{entry['query'][:100]}{"..." if len(entry['query']) > 100 else ""}*
                
                –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {entry['config']['query_depth']} –¥—ä–ª–±–æ—á–∏–Ω–∞, {entry['config']['max_iterations']} –∏—Ç–µ—Ä–∞—Ü–∏–∏
                """)
                
                if st.button(f"üîÑ –ü–æ–≤—Ç–æ—Ä–∏ –∑–∞—è–≤–∫–∞ {i}", key=f"repeat_{i}"):
                    st.session_state.user_input = entry['query']
                    st.session_state.search_config = entry['config']
                    st.rerun()

    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; padding: 2rem 0;'>
        <h4>üáßüá¨ –ë—ä–ª–≥–∞—Ä—Å–∫–∞ –ü—Ä–∞–≤–Ω–∞ –ò–∑—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—Å–∫–∞ –°–∏—Å—Ç–µ–º–∞</h4>
        <p>–ë–∞–∑–∏—Ä–∞–Ω–∞ –Ω–∞ LangGraph, OpenAI –∏ Google Custom Search Engine</p>
        <p>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ –∑–∞ –±—ä–ª–≥–∞—Ä—Å–∫–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—Å—Ç–≤–æ –∏ —Å—ä–¥–µ–±–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞</p>
        <small>–í–µ—Ä—Å–∏—è 2.0 - –ü–æ–¥–æ–±—Ä–µ–Ω–∞ –∑–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏—è –ø—Ä–∞–≤–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç</small>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main() 