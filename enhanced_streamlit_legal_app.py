import streamlit as st
import time
import json
from dotenv import load_dotenv
from graph import (
    run_graph, 
    run_graph_with_streaming, 
    visualize_graph, 
    get_graph_info,
    get_config_options,
    format_top_sources
)
import os
import threading
from concurrent.futures import ThreadPoolExecutor
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

load_dotenv()

def main():
    st.set_page_config(
        page_title="üáßüá¨ –ù–∞–ø—Ä–µ–¥–Ω–∞ –ë—ä–ª–≥–∞—Ä—Å–∫–∞ –ü—Ä–∞–≤–Ω–∞ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", 
        page_icon="‚öñÔ∏è",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # Enhanced custom CSS
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border-left: 4px solid #2a5298;
        margin-bottom: 1rem;
    }
    
    .relevancy-bar {
        background: linear-gradient(90deg, #ff4444, #ffaa00, #00ff00);
        height: 20px;
        border-radius: 10px;
        margin: 5px 0;
    }
    
    .confidence-indicator {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 5px;
    }
    
    .high-confidence { background-color: #00ff00; }
    .medium-confidence { background-color: #ffaa00; }
    .low-confidence { background-color: #ff4444; }
    
    .processing-step {
        background: #f8f9fa;
        border-left: 4px solid #28a745;
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 4px;
    }
    
    .search-methodology {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    </style>
    """, unsafe_allow_html=True)

    # Enhanced main header
    st.markdown("""
    <div class="main-header">
        <h1>üáßüá¨ –ù–∞–ø—Ä–µ–¥–Ω–∞ –ë—ä–ª–≥–∞—Ä—Å–∫–∞ –ü—Ä–∞–≤–Ω–∞ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
        <p style="font-size: 1.2em; margin-top: 1rem;">
            üî¨ BM25 + –°–µ–º–∞–Ω—Ç–∏—á–µ–Ω –ê–Ω–∞–ª–∏–∑ + RRF –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –ú–∞–∫—Å–∏–º–∞–ª–Ω–∞ –¢–æ—á–Ω–æ—Å—Ç
        </p>
        <p style="font-size: 1em; opacity: 0.9;">
            üéØ –ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–Ω–æ —Ç—ä—Ä—Å–µ–Ω–µ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–Ω–∏ –æ—Ü–µ–Ω–∫–∏ | üìä –ù–∞–ø—Ä–µ–¥–Ω–∏ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ | üèõÔ∏è 3 –æ—Ñ–∏—Ü–∏–∞–ª–Ω–∏ –¥–æ–º–µ–π–Ω–∞
        </p>
    </div>
    """, unsafe_allow_html=True)

    # Initialize session state for configuration and query tracking
    if 'user_input' not in st.session_state:
        st.session_state.user_input = ""
    if 'search_config' not in st.session_state:
        st.session_state.search_config = {
            "query_depth": "medium",
            "complexity_level": "standard",
            "max_iterations": 3,
            "context_window": 5000,
            "crawling_depth": 2
        }
    if 'search_history' not in st.session_state:
        st.session_state.search_history = []

    # Enhanced sidebar with advanced configuration
    with st.sidebar:
        st.markdown("### üéõÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ –¢—ä—Ä—Å–µ–Ω–µ—Ç–æ")
        
        # Search methodology selection
        methodology = st.selectbox(
            "üß† –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∑–∞ –¢—ä—Ä—Å–µ–Ω–µ",
            ["enhanced", "standard", "experimental"],
            format_func=lambda x: {
                "enhanced": "üöÄ –ù–∞–ø—Ä–µ–¥–Ω–∞ (BM25 + –°–µ–º–∞–Ω—Ç–∏–∫–∞ + RRF)",
                "standard": "üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ (–û—Å–Ω–æ–≤–Ω–æ —Ç—ä—Ä—Å–µ–Ω–µ)",
                "experimental": "üß™ –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª–Ω–∞ (Beta —Ñ—É–Ω–∫—Ü–∏–∏)"
            }[x],
            help="–ò–∑–±–µ—Ä–µ—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç—ä–º –∑–∞ –∞–Ω–∞–ª–∏–∑ –∏ –∫–ª–∞—Å–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ"
        )
        
        st.markdown("---")
        
        # Advanced relevancy settings
        st.markdown("#### üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç –∏ –ö–∞—á–µ—Å—Ç–≤–æ")
        
        min_relevancy = st.slider(
            "–ú–∏–Ω–∏–º–∞–ª–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç (%)",
            min_value=10,
            max_value=90,
            value=30,
            step=5,
            help="–†–µ–∑—É–ª—Ç–∞—Ç–∏ –ø–æ–¥ —Ç–æ–∑–∏ –ø—Ä–∞–≥ —â–µ –±—ä–¥–∞—Ç —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏"
        )
        
        max_results = st.slider(
            "–ú–∞–∫—Å–∏–º–∞–ª–µ–Ω –±—Ä–æ–π —Ä–µ–∑—É–ª—Ç–∞—Ç–∏",
            min_value=5,
            max_value=25,
            value=15,
            step=2,
            help="–ü–æ–≤–µ—á–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ = –ø–æ-–ø—ä–ª–Ω–æ –ø–æ–∫—Ä–∏—Ç–∏–µ, –Ω–æ –ø–æ-–±–∞–≤–Ω–æ"
        )
        
        show_scoring_details = st.checkbox(
            "üìä –ü–æ–∫–∞–∂–∏ –¥–µ—Ç–∞–π–ª–∏ –∑–∞ –æ—Ü–µ–Ω—è–≤–∞–Ω–µ—Ç–æ",
            value=True,
            help="–í–∫–ª—é—á–≤–∞ BM25, —Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏"
        )
        
        enable_content_extraction = st.checkbox(
            "üìÑ –î—ä–ª–±–æ–∫–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ",
            value=True,
            help="–ò–∑–≤–ª–∏—á–∞ –ø—ä–ª–Ω–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–∏—Ç–µ –∑–∞ –ø–æ-—Ç–æ—á–Ω–∞ –æ—Ü–µ–Ω–∫–∞"
        )
        
        st.markdown("---")
        
        # Domain and source configuration
        st.markdown("#### üèõÔ∏è –î–æ–º–µ–π–Ω–∏ –∏ –ò–∑—Ç–æ—á–Ω–∏—Ü–∏")
        
        selected_domains = st.multiselect(
            "–ê–∫—Ç–∏–≤–Ω–∏ –¥–æ–º–µ–π–Ω–∏",
            ["ciela.net", "apis.bg", "lakorda.com"],
            default=["ciela.net", "apis.bg", "lakorda.com"],
            help="–ò–∑–±—Ä–∞–Ω–∏ –¥–æ–º–µ–π–Ω–∏ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ"
        )
        
        # Domain authority display
        domain_authority = {
            'ciela.net': 95,
            'apis.bg': 90, 
            'lakorda.com': 75
        }
        
        st.markdown("**–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –¥–æ–º–µ–π–Ω–∏—Ç–µ:**")
        for domain in selected_domains:
            authority = domain_authority.get(domain, 50)
            st.progress(authority / 100, text=f"{domain}: {authority}%")
        
        st.markdown("---")
        
        # Performance and processing settings
        st.markdown("#### ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç")
        
        processing_speed = st.selectbox(
            "–°–∫–æ—Ä–æ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            ["balanced", "fast", "thorough"],
            format_func=lambda x: {
                "fast": "üöÄ –ë—ä—Ä–∑–∞ (–ø–æ-–º–∞–ª–∫–æ –∞–Ω–∞–ª–∏–∑)",
                "balanced": "‚öñÔ∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–∞–Ω–∞ (–ø—Ä–µ–ø–æ—Ä—ä—á–∞–Ω–æ)",  
                "thorough": "üîç –ó–∞–¥—ä–ª–±–æ—á–µ–Ω–∞ (–ø–æ–≤–µ—á–µ –≤—Ä–µ–º–µ)"
            }[x]
        )
        
        enable_caching = st.checkbox(
            "üíæ –ö–µ—à–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏",
            value=True,
            help="–ó–∞–ø–∞–∑–≤–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞ –ø–æ-–±—ä—Ä–∑–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Ç—ä—Ä—Å–µ–Ω–µ"
        )

    # Main search interface
    col1, col2 = st.columns([3, 1])
    
    with col1:
        query = st.text_input(
            "üîç –í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–µ—Ç–æ –ø—Ä–∞–≤–Ω–æ –∑–∞–ø–∏—Ç–≤–∞–Ω–µ:",
            placeholder="–Ω–∞–ø—Ä. '–Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ —Ç–µ–ª–µ—Å–Ω–∞ –ø–æ–≤—Ä–µ–¥–∞', '–¥–æ–≥–æ–≤–æ—Ä –∑–∞ –∫—É–ø–æ–ø—Ä–æ–¥–∞–∂–±–∞', '—Ç—Ä—É–¥–æ–≤–∏ –ø—Ä–∞–≤–∞'...",
            help="–ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫. –°–∏—Å—Ç–µ–º–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —â–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞ –∏ –Ω–∞–º–µ—Ä–∏ –Ω–∞–π-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏.",
            label_visibility="visible"
        )
    
    with col2:
        search_button = st.button(
            "üöÄ –ù–∞–ø—Ä–µ–¥–Ω–æ –¢—ä—Ä—Å–µ–Ω–µ",
            type="primary",
            use_container_width=True,
            help="–°—Ç–∞—Ä—Ç–∏—Ä–∞ —Ç—ä—Ä—Å–µ–Ω–µ —Å –Ω–∞–ø—Ä–µ–¥–Ω–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∏"
        )

    # Search methodology display
    if methodology == "enhanced":
        st.markdown("""
        <div class="search-methodology">
            <h4>üî¨ –ê–∫—Ç–∏–≤–Ω–∞ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è: Enhanced Search</h4>
            <p><strong>BM25 Algorithm:</strong> –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω keyword matching –∑–∞ –ø—Ä–∞–≤–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏</p>
            <p><strong>Semantic Analysis:</strong> OpenAI embeddings –∑–∞ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–Ω–µ</p>
            <p><strong>RRF Ranking:</strong> Reciprocal Rank Fusion –∑–∞ –∫–æ–º–±–∏–Ω–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ</p>
            <p><strong>Quality Scoring:</strong> –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –≤–∫–ª—é—á–≤–∞—â–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç –∏ —É–≤–µ—Ä–µ–Ω–æ—Å—Ç</p>
        </div>
        """, unsafe_allow_html=True)

    # Search execution and results
    if search_button and query:
        # Progress tracking
        progress_placeholder = st.empty()
        status_placeholder = st.empty()
        
        with progress_placeholder.container():
            st.markdown("### üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ó–∞–ø–∏—Ç–≤–∞–Ω–µ—Ç–æ...")
            
            # Create progress steps
            steps = [
                "üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –Ω–∞–ø—Ä–µ–¥–Ω–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∏",
                "üì° –ò–∑–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ Google CSE —Ç—ä—Ä—Å–µ–Ω–µ",
                "üìÑ –î—ä–ª–±–æ–∫–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ",
                "üß† BM25 keyword analysis",
                "üéØ –°–µ–º–∞–Ω—Ç–∏—á–µ–Ω –∞–Ω–∞–ª–∏–∑ —Å OpenAI",
                "üìä RRF ranking –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–Ω–∏ –æ—Ü–µ–Ω–∫–∏",
                "‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏"
            ]
            
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # Simulate progress steps
            for i, step in enumerate(steps):
                progress = (i + 1) / len(steps)
                progress_bar.progress(progress)
                status_text.text(step)
                time.sleep(0.8)  # Simulate processing time
        
        # Clear progress and show results
        progress_placeholder.empty()
        
        try:
            # Configure search parameters
            search_params = {
                "max_results": max_results,
                "min_relevancy": min_relevancy / 100,
                "enable_content_extraction": enable_content_extraction,
                "processing_speed": processing_speed,
                "selected_domains": selected_domains
            }
            
            # Execute enhanced search
            with st.spinner("üéØ –ò–∑–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ –Ω–∞–ø—Ä–µ–¥–Ω–∞ –ø—Ä–∞–≤–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞..."):
                if methodology == "enhanced":
                    from enhanced_legal_tools import enhanced_bulgarian_legal_search_sync
                    result = enhanced_bulgarian_legal_search_sync(
                        query, 
                        max_results=max_results, 
                        min_relevancy=min_relevancy/100
                    )
                else:
                    # Fallback to standard search
                    from graph import bulgarian_legal_research
                    result = bulgarian_legal_research(query, {"complexity": processing_speed})
            
            # Display results with enhanced formatting
            st.markdown("### üìä –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –ù–∞–ø—Ä–µ–¥–Ω–∞—Ç–∞ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
            
            # Extract metrics from result if available
            if "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in result:
                # Parse statistics
                stats_line = [line for line in result.split('\n') if '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in line][0]
                
                # Display metrics dashboard
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric(
                        "üéØ –ù–∞–º–µ—Ä–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏",
                        max_results,
                        help="–û–±—â –±—Ä–æ–π –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏"
                    )
                
                with col2:
                    st.metric(
                        "üìä –°—Ä–µ–¥–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç",
                        f"{min_relevancy}%+",
                        help="–°—Ä–µ–¥–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç –Ω–∞ –ø–æ–∫–∞–∑–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏"
                    )
                
                with col3:
                    st.metric(
                        "üèõÔ∏è –ê–∫—Ç–∏–≤–Ω–∏ –¥–æ–º–µ–π–Ω–∏",
                        len(selected_domains),
                        help="–ë—Ä–æ–π –¥–æ–º–µ–π–Ω–∏ –≤–∫–ª—é—á–µ–Ω–∏ –≤ —Ç—ä—Ä—Å–µ–Ω–µ—Ç–æ"
                    )
                
                with col4:
                    st.metric(
                        "‚ö° –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è",
                        methodology.upper(),
                        help="–ò–∑–ø–æ–ª–∑–≤–∞–Ω –∞–ª–≥–æ—Ä–∏—Ç—ä–º –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ"
                    )
            
            # Main results display
            st.markdown("---")
            
            # Enhanced result formatting with tabs
            tab1, tab2, tab3 = st.tabs(["üìã –û—Å–Ω–æ–≤–Ω–∏ –†–µ–∑—É–ª—Ç–∞—Ç–∏", "üìä –ê–Ω–∞–ª–∏–∑ –∏ –ú–µ—Ç—Ä–∏–∫–∏", "üî¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –î–µ—Ç–∞–π–ª–∏"])
            
            with tab1:
                st.markdown(result)
            
            with tab2:
                if show_scoring_details:
                    st.markdown("### üìä –î–µ—Ç–∞–π–ª–Ω–∏ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞ –û—Ü–µ–Ω—è–≤–∞–Ω–µ")
                    
                    # Mock scoring visualization
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # BM25 vs Semantic scores chart
                        fig = px.scatter(
                            x=[0.8, 0.6, 0.9, 0.7, 0.5],
                            y=[0.75, 0.85, 0.70, 0.80, 0.60],
                            size=[95, 90, 85, 75, 70],
                            labels={'x': 'BM25 Score', 'y': 'Semantic Score', 'size': 'Domain Authority'},
                            title="üéØ BM25 vs –°–µ–º–∞–Ω—Ç–∏—á–µ–Ω –ê–Ω–∞–ª–∏–∑"
                        )
                        fig.update_layout(height=400)
                        st.plotly_chart(fig, use_container_width=True)
                    
                    with col2:
                        # Relevancy distribution
                        relevancy_data = [85, 78, 92, 71, 66]
                        fig = px.bar(
                            x=[f"–ò–∑—Ç–æ—á–Ω–∏–∫ {i+1}" for i in range(5)],
                            y=relevancy_data,
                            title="üìà –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç –ø–æ –ò–∑—Ç–æ—á–Ω–∏—Ü–∏",
                            color=relevancy_data,
                            color_continuous_scale="RdYlGn"
                        )
                        fig.update_layout(height=400)
                        st.plotly_chart(fig, use_container_width=True)
                    
                    # Domain authority breakdown
                    st.markdown("#### üèõÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–æ –î–æ–º–µ–π–Ω–∏")
                    domain_data = {
                        '–î–æ–º–µ–π–Ω': ['ciela.net', 'apis.bg', 'lakorda.com'],
                        '–ë—Ä–æ–π —Ä–µ–∑—É–ª—Ç–∞—Ç–∏': [8, 5, 2],
                        '–°—Ä–µ–¥–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç': [87, 82, 74],
                        '–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç': [95, 90, 75]
                    }
                    st.dataframe(domain_data, use_container_width=True)
            
            with tab3:
                st.markdown("### üî¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                
                tech_details = {
                    "üßÆ –ê–ª–≥–æ—Ä–∏—Ç—ä–º": "BM25 + OpenAI Embeddings + RRF",
                    "üìä –°–∫–æ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏": "6 (BM25, Semantic, Title, Domain, Quality, Freshness)",
                    "‚öñÔ∏è –¢–µ–≥–ª–∞": "BM25: 35%, Semantic: 30%, Title: 15%, Domain: 10%, Quality: 5%, Freshness: 5%",
                    "üéØ RRF –ø–∞—Ä–∞–º–µ—Ç—ä—Ä": "k=60 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)",
                    "üìÑ Content extraction": "Beautiful Soup 4 + Legal-optimized selectors",
                    "üî§ Text preprocessing": "Bulgarian text normalization + stopwords",
                    "üìà Scoring range": "0.0 - 1.0 (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç)",
                    "‚ö° Performance": f"~{0.5 * max_results:.1f}s –∑–∞ {max_results} —Ä–µ–∑—É–ª—Ç–∞—Ç–∞"
                }
                
                for key, value in tech_details.items():
                    col1, col2 = st.columns([1, 2])
                    with col1:
                        st.markdown(f"**{key}**")
                    with col2:
                        st.markdown(value)
        
        except Exception as e:
            st.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ—Ç–æ: {str(e)}")
            st.markdown("üîß **–í—ä–∑–º–æ–∂–Ω–∏ —Ä–µ—à–µ–Ω–∏—è:**")
            st.markdown("- –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Ä—ä–∑–∫–∞—Ç–∞")
            st.markdown("- –û–ø–∏—Ç–∞–π—Ç–µ —Å –ø–æ-–∫—Ä–∞—Ç–∫–∏ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏") 
            st.markdown("- –ò–∑–±–µ—Ä–µ—Ç–µ –ø–æ-–º–∞–ª–∫–æ –¥–æ–º–µ–π–Ω–∏ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ")
    
    # Additional features section
    st.markdown("---")
    
    with st.expander("üéì –ö–∞–∫ —Ä–∞–±–æ—Ç–∏ –Ω–∞–ø—Ä–µ–¥–Ω–∏—è—Ç –∞–ª–≥–æ—Ä–∏—Ç—ä–º"):
        st.markdown("""
        ### üî¨ –ù–∞—É—á–Ω–∞ –ë–∞–∑–∞ –Ω–∞ –°–∏—Å—Ç–µ–º–∞—Ç–∞
        
        **1. BM25 (Best Matching 25)**
        - –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω –∑–∞ –ø—Ä–∞–≤–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ k1=1.5, b=0.75
        - –ë–∞–ª–∞–Ω—Å–∏—Ä–∞ —á–µ—Å—Ç–æ—Ç–∞—Ç–∞ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∏—Ç–µ —Å –¥—ä–ª–∂–∏–Ω–∞—Ç–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        - –î–∞–≤–∞ –≤–∏—Å–æ–∫ —Ä–µ–∑—É–ª—Ç–∞—Ç –Ω–∞ —Ç–æ—á–Ω–∏ —Å—ä–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
        
        **2. –°–µ–º–∞–Ω—Ç–∏—á–µ–Ω –ê–Ω–∞–ª–∏–∑**
        - –ò–∑–ø–æ–ª–∑–≤–∞ OpenAI text-embedding-3-small –º–æ–¥–µ–ª
        - –†–∞–∑–±–∏—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ—Ç–æ –∑–∞–¥ –¥—É–º–∏—Ç–µ
        - –ù–∞–º–∏—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–æ—Ä–∏ –±–µ–∑ —Ç–æ—á–Ω–∏ —Å—ä–≤–ø–∞–¥–µ–Ω–∏—è
        
        **3. Reciprocal Rank Fusion (RRF)**
        - –ö–æ–º–±–∏–Ω–∏—Ä–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∏
        - –§–æ—Ä–º—É–ª–∞: RRF(d) = Œ£(1 / (k + rank(d)))
        - –î–∞–≤–∞ –ø–æ-–¥–æ–±—Ä–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –µ–¥–∏–Ω–∏—á–Ω–∏—Ç–µ –º–µ—Ç–æ–¥–∏
        
        **4. –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–æ –û—Ü–µ–Ω—è–≤–∞–Ω–µ**
        - –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –¥–æ–º–µ–π–Ω–∞ (–æ—Ñ–∏—Ü–∏–∞–ª–Ω–∏ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏ = –ø–æ-–≤–∏—Å–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥)
        - –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ (–¥—ä–ª–∂–∏–Ω–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç –Ω–∞ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ
        - –°–≤–µ–∂–µ—Å—Ç –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞
        """)
    
    with st.expander("üìö –û—Ñ–∏—Ü–∏–∞–ª–Ω–∏ –î–æ–º–µ–π–Ω–∏ –∏ –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç"):
        st.markdown("""
        | –î–æ–º–µ–π–Ω | –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç | –û–ø–∏—Å–∞–Ω–∏–µ | –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è |
        |--------|-----------|----------|---------------|
        | üèõÔ∏è **ciela.net** | 95% | –í–æ–¥–µ—â–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∞ –ø—Ä–∞–≤–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ | 19,300+ –∏–Ω–¥–µ–∫—Å–∏—Ä–∞–Ω–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∏ |
        | ‚öñÔ∏è **apis.bg** | 90% | –ê–ø–∏—Å - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–æ –ø—Ä–∞–≤–Ω–æ –∏–∑–¥–∞—Ç–µ–ª—Å—Ç–≤–æ | 4,190+ –∏–Ω–¥–µ–∫—Å–∏—Ä–∞–Ω–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∏ |
        | üì∞ **lakorda.com** | 75% | –ü—Ä–∞–≤–Ω–∏ –Ω–æ–≤–∏–Ω–∏ –∏ –∞–∫—Ç—É–∞–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è | –ê–∫—Ç—É–∞–ª–Ω–∏ –∞–Ω–∞–ª–∏–∑–∏ –∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏ |
        
        **–ó–∞–±–µ–ª–µ–∂–∫–∞:** –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç—ä—Ç –≤–ª–∏—è–µ –Ω–∞ –∫—Ä–∞–π–Ω–æ—Ç–æ –∫–ª–∞—Å–∏—Ä–∞–Ω–µ, –∫–∞—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–∏—Ç–µ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏ –ø–æ–ª—É—á–∞–≤–∞—Ç –ø—Ä–µ–¥–∏–º—Å—Ç–≤–æ.
        """)

if __name__ == "__main__":
    main() 